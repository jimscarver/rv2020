/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var CasperMessage_pb = require('./CasperMessage_pb.js');
goog.object.extend(proto, CasperMessage_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var scalapb_scalapb_pb = require('./scalapb/scalapb_pb.js');
goog.object.extend(proto, scalapb_scalapb_pb);
var RhoTypes_pb = require('./RhoTypes_pb.js');
goog.object.extend(proto, RhoTypes_pb);
goog.exportSymbol('proto.casper.BlockInfo', null, global);
goog.exportSymbol('proto.casper.BlockQuery', null, global);
goog.exportSymbol('proto.casper.BlocksQuery', null, global);
goog.exportSymbol('proto.casper.BlocksQueryByHeight', null, global);
goog.exportSymbol('proto.casper.BondInfo', null, global);
goog.exportSymbol('proto.casper.BondStatusQuery', null, global);
goog.exportSymbol('proto.casper.ContinuationAtNameQuery', null, global);
goog.exportSymbol('proto.casper.ContinuationsWithBlockInfo', null, global);
goog.exportSymbol('proto.casper.DataAtNameQuery', null, global);
goog.exportSymbol('proto.casper.DataWithBlockInfo', null, global);
goog.exportSymbol('proto.casper.DeployInfo', null, global);
goog.exportSymbol('proto.casper.ExploratoryDeployQuery', null, global);
goog.exportSymbol('proto.casper.FindDeployQuery', null, global);
goog.exportSymbol('proto.casper.IsFinalizedQuery', null, global);
goog.exportSymbol('proto.casper.LastFinalizedBlockQuery', null, global);
goog.exportSymbol('proto.casper.LightBlockInfo', null, global);
goog.exportSymbol('proto.casper.MachineVerifyQuery', null, global);
goog.exportSymbol('proto.casper.PrivateNamePreviewQuery', null, global);
goog.exportSymbol('proto.casper.VisualizeDagQuery', null, global);
goog.exportSymbol('proto.casper.WaitingContinuationInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.FindDeployQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.FindDeployQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.FindDeployQuery.displayName = 'proto.casper.FindDeployQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.FindDeployQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.FindDeployQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.FindDeployQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.FindDeployQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployid: msg.getDeployid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.FindDeployQuery}
 */
proto.casper.FindDeployQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.FindDeployQuery;
  return proto.casper.FindDeployQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.FindDeployQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.FindDeployQuery}
 */
proto.casper.FindDeployQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeployid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.FindDeployQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.FindDeployQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.FindDeployQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.FindDeployQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeployid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes deployId = 1;
 * @return {string}
 */
proto.casper.FindDeployQuery.prototype.getDeployid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes deployId = 1;
 * This is a type-conversion wrapper around `getDeployid()`
 * @return {string}
 */
proto.casper.FindDeployQuery.prototype.getDeployid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeployid()));
};


/**
 * optional bytes deployId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeployid()`
 * @return {!Uint8Array}
 */
proto.casper.FindDeployQuery.prototype.getDeployid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeployid()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.FindDeployQuery.prototype.setDeployid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BlockQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.BlockQuery.displayName = 'proto.casper.BlockQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockQuery}
 */
proto.casper.BlockQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockQuery;
  return proto.casper.BlockQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockQuery}
 */
proto.casper.BlockQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.casper.BlockQuery.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.casper.BlockQuery.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlocksQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BlocksQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.BlocksQuery.displayName = 'proto.casper.BlocksQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlocksQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlocksQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlocksQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlocksQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    depth: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlocksQuery}
 */
proto.casper.BlocksQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlocksQuery;
  return proto.casper.BlocksQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlocksQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlocksQuery}
 */
proto.casper.BlocksQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlocksQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlocksQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlocksQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlocksQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 depth = 1;
 * @return {number}
 */
proto.casper.BlocksQuery.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.casper.BlocksQuery.prototype.setDepth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlocksQueryByHeight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BlocksQueryByHeight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.BlocksQueryByHeight.displayName = 'proto.casper.BlocksQueryByHeight';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlocksQueryByHeight.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlocksQueryByHeight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlocksQueryByHeight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlocksQueryByHeight.toObject = function(includeInstance, msg) {
  var f, obj = {
    startblocknumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endblocknumber: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlocksQueryByHeight}
 */
proto.casper.BlocksQueryByHeight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlocksQueryByHeight;
  return proto.casper.BlocksQueryByHeight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlocksQueryByHeight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlocksQueryByHeight}
 */
proto.casper.BlocksQueryByHeight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartblocknumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndblocknumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlocksQueryByHeight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlocksQueryByHeight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlocksQueryByHeight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlocksQueryByHeight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartblocknumber();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEndblocknumber();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 startBlockNumber = 1;
 * @return {number}
 */
proto.casper.BlocksQueryByHeight.prototype.getStartblocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.casper.BlocksQueryByHeight.prototype.setStartblocknumber = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 endBlockNumber = 2;
 * @return {number}
 */
proto.casper.BlocksQueryByHeight.prototype.getEndblocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.casper.BlocksQueryByHeight.prototype.setEndblocknumber = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.DataAtNameQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.DataAtNameQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.DataAtNameQuery.displayName = 'proto.casper.DataAtNameQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.DataAtNameQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.DataAtNameQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.DataAtNameQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.DataAtNameQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    depth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: (f = msg.getName()) && RhoTypes_pb.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.DataAtNameQuery}
 */
proto.casper.DataAtNameQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.DataAtNameQuery;
  return proto.casper.DataAtNameQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.DataAtNameQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.DataAtNameQuery}
 */
proto.casper.DataAtNameQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    case 2:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.DataAtNameQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.DataAtNameQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.DataAtNameQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.DataAtNameQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 depth = 1;
 * @return {number}
 */
proto.casper.DataAtNameQuery.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.casper.DataAtNameQuery.prototype.setDepth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Par name = 2;
 * @return {?proto.Par}
 */
proto.casper.DataAtNameQuery.prototype.getName = function() {
  return /** @type{?proto.Par} */ (
    jspb.Message.getWrapperField(this, RhoTypes_pb.Par, 2));
};


/** @param {?proto.Par|undefined} value */
proto.casper.DataAtNameQuery.prototype.setName = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.casper.DataAtNameQuery.prototype.clearName = function() {
  this.setName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.DataAtNameQuery.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ContinuationAtNameQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.ContinuationAtNameQuery.repeatedFields_, null);
};
goog.inherits(proto.casper.ContinuationAtNameQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.ContinuationAtNameQuery.displayName = 'proto.casper.ContinuationAtNameQuery';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.ContinuationAtNameQuery.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ContinuationAtNameQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ContinuationAtNameQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ContinuationAtNameQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ContinuationAtNameQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    depth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    namesList: jspb.Message.toObjectList(msg.getNamesList(),
    RhoTypes_pb.Par.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ContinuationAtNameQuery}
 */
proto.casper.ContinuationAtNameQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ContinuationAtNameQuery;
  return proto.casper.ContinuationAtNameQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ContinuationAtNameQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ContinuationAtNameQuery}
 */
proto.casper.ContinuationAtNameQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    case 2:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.addNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ContinuationAtNameQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ContinuationAtNameQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ContinuationAtNameQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ContinuationAtNameQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 depth = 1;
 * @return {number}
 */
proto.casper.ContinuationAtNameQuery.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.casper.ContinuationAtNameQuery.prototype.setDepth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Par names = 2;
 * @return {!Array<!proto.Par>}
 */
proto.casper.ContinuationAtNameQuery.prototype.getNamesList = function() {
  return /** @type{!Array<!proto.Par>} */ (
    jspb.Message.getRepeatedWrapperField(this, RhoTypes_pb.Par, 2));
};


/** @param {!Array<!proto.Par>} value */
proto.casper.ContinuationAtNameQuery.prototype.setNamesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Par}
 */
proto.casper.ContinuationAtNameQuery.prototype.addNames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Par, opt_index);
};


proto.casper.ContinuationAtNameQuery.prototype.clearNamesList = function() {
  this.setNamesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.VisualizeDagQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.VisualizeDagQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.VisualizeDagQuery.displayName = 'proto.casper.VisualizeDagQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.VisualizeDagQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.VisualizeDagQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.VisualizeDagQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.VisualizeDagQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    depth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    showjustificationlines: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.VisualizeDagQuery}
 */
proto.casper.VisualizeDagQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.VisualizeDagQuery;
  return proto.casper.VisualizeDagQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.VisualizeDagQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.VisualizeDagQuery}
 */
proto.casper.VisualizeDagQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowjustificationlines(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.VisualizeDagQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.VisualizeDagQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.VisualizeDagQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.VisualizeDagQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getShowjustificationlines();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 depth = 1;
 * @return {number}
 */
proto.casper.VisualizeDagQuery.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.casper.VisualizeDagQuery.prototype.setDepth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool showJustificationLines = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.casper.VisualizeDagQuery.prototype.getShowjustificationlines = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.casper.VisualizeDagQuery.prototype.setShowjustificationlines = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.MachineVerifyQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.MachineVerifyQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.MachineVerifyQuery.displayName = 'proto.casper.MachineVerifyQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.MachineVerifyQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.MachineVerifyQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.MachineVerifyQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.MachineVerifyQuery.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.MachineVerifyQuery}
 */
proto.casper.MachineVerifyQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.MachineVerifyQuery;
  return proto.casper.MachineVerifyQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.MachineVerifyQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.MachineVerifyQuery}
 */
proto.casper.MachineVerifyQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.MachineVerifyQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.MachineVerifyQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.MachineVerifyQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.MachineVerifyQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.PrivateNamePreviewQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.PrivateNamePreviewQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.PrivateNamePreviewQuery.displayName = 'proto.casper.PrivateNamePreviewQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.PrivateNamePreviewQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.PrivateNamePreviewQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.PrivateNamePreviewQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.PrivateNamePreviewQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: msg.getUser_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nameqty: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.PrivateNamePreviewQuery}
 */
proto.casper.PrivateNamePreviewQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.PrivateNamePreviewQuery;
  return proto.casper.PrivateNamePreviewQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.PrivateNamePreviewQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.PrivateNamePreviewQuery}
 */
proto.casper.PrivateNamePreviewQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNameqty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.PrivateNamePreviewQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.PrivateNamePreviewQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.PrivateNamePreviewQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.PrivateNamePreviewQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getNameqty();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bytes user = 1;
 * @return {string}
 */
proto.casper.PrivateNamePreviewQuery.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes user = 1;
 * This is a type-conversion wrapper around `getUser()`
 * @return {string}
 */
proto.casper.PrivateNamePreviewQuery.prototype.getUser_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUser()));
};


/**
 * optional bytes user = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUser()`
 * @return {!Uint8Array}
 */
proto.casper.PrivateNamePreviewQuery.prototype.getUser_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUser()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.PrivateNamePreviewQuery.prototype.setUser = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.casper.PrivateNamePreviewQuery.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.casper.PrivateNamePreviewQuery.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 nameQty = 3;
 * @return {number}
 */
proto.casper.PrivateNamePreviewQuery.prototype.getNameqty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.casper.PrivateNamePreviewQuery.prototype.setNameqty = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.LastFinalizedBlockQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.LastFinalizedBlockQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.LastFinalizedBlockQuery.displayName = 'proto.casper.LastFinalizedBlockQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.LastFinalizedBlockQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.LastFinalizedBlockQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.LastFinalizedBlockQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.LastFinalizedBlockQuery.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.LastFinalizedBlockQuery}
 */
proto.casper.LastFinalizedBlockQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.LastFinalizedBlockQuery;
  return proto.casper.LastFinalizedBlockQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.LastFinalizedBlockQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.LastFinalizedBlockQuery}
 */
proto.casper.LastFinalizedBlockQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.LastFinalizedBlockQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.LastFinalizedBlockQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.LastFinalizedBlockQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.LastFinalizedBlockQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.IsFinalizedQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.IsFinalizedQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.IsFinalizedQuery.displayName = 'proto.casper.IsFinalizedQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.IsFinalizedQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.IsFinalizedQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.IsFinalizedQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.IsFinalizedQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.IsFinalizedQuery}
 */
proto.casper.IsFinalizedQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.IsFinalizedQuery;
  return proto.casper.IsFinalizedQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.IsFinalizedQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.IsFinalizedQuery}
 */
proto.casper.IsFinalizedQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.IsFinalizedQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.IsFinalizedQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.IsFinalizedQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.IsFinalizedQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.casper.IsFinalizedQuery.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.casper.IsFinalizedQuery.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BondStatusQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BondStatusQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.BondStatusQuery.displayName = 'proto.casper.BondStatusQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BondStatusQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BondStatusQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BondStatusQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BondStatusQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickey: msg.getPublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BondStatusQuery}
 */
proto.casper.BondStatusQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BondStatusQuery;
  return proto.casper.BondStatusQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BondStatusQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BondStatusQuery}
 */
proto.casper.BondStatusQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BondStatusQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BondStatusQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BondStatusQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BondStatusQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes publicKey = 1;
 * @return {string}
 */
proto.casper.BondStatusQuery.prototype.getPublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes publicKey = 1;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.casper.BondStatusQuery.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes publicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.casper.BondStatusQuery.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.BondStatusQuery.prototype.setPublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ExploratoryDeployQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.ExploratoryDeployQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.ExploratoryDeployQuery.displayName = 'proto.casper.ExploratoryDeployQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ExploratoryDeployQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ExploratoryDeployQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ExploratoryDeployQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ExploratoryDeployQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    term: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ExploratoryDeployQuery}
 */
proto.casper.ExploratoryDeployQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ExploratoryDeployQuery;
  return proto.casper.ExploratoryDeployQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ExploratoryDeployQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ExploratoryDeployQuery}
 */
proto.casper.ExploratoryDeployQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ExploratoryDeployQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ExploratoryDeployQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ExploratoryDeployQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ExploratoryDeployQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerm();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string term = 1;
 * @return {string}
 */
proto.casper.ExploratoryDeployQuery.prototype.getTerm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.casper.ExploratoryDeployQuery.prototype.setTerm = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BondInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BondInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.BondInfo.displayName = 'proto.casper.BondInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BondInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BondInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BondInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BondInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stake: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BondInfo}
 */
proto.casper.BondInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BondInfo;
  return proto.casper.BondInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BondInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BondInfo}
 */
proto.casper.BondInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BondInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BondInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BondInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BondInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStake();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string validator = 1;
 * @return {string}
 */
proto.casper.BondInfo.prototype.getValidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.casper.BondInfo.prototype.setValidator = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 stake = 2;
 * @return {number}
 */
proto.casper.BondInfo.prototype.getStake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.casper.BondInfo.prototype.setStake = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.DeployInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.DeployInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.DeployInfo.displayName = 'proto.casper.DeployInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.DeployInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.DeployInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.DeployInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.DeployInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    term: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sig: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sigalgorithm: jspb.Message.getFieldWithDefault(msg, 5, ""),
    phloprice: jspb.Message.getFieldWithDefault(msg, 7, 0),
    phlolimit: jspb.Message.getFieldWithDefault(msg, 8, 0),
    validafterblocknumber: jspb.Message.getFieldWithDefault(msg, 9, 0),
    cost: jspb.Message.getFieldWithDefault(msg, 10, 0),
    errored: jspb.Message.getFieldWithDefault(msg, 11, false),
    systemdeployerror: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.DeployInfo}
 */
proto.casper.DeployInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.DeployInfo;
  return proto.casper.DeployInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.DeployInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.DeployInfo}
 */
proto.casper.DeployInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeployer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerm(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSig(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigalgorithm(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhloprice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhlolimit(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValidafterblocknumber(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCost(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setErrored(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemdeployerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.DeployInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.DeployInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.DeployInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.DeployInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeployer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTerm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSig();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSigalgorithm();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPhloprice();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getPhlolimit();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getValidafterblocknumber();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getCost();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getErrored();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getSystemdeployerror();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string deployer = 1;
 * @return {string}
 */
proto.casper.DeployInfo.prototype.getDeployer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.casper.DeployInfo.prototype.setDeployer = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string term = 2;
 * @return {string}
 */
proto.casper.DeployInfo.prototype.getTerm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.casper.DeployInfo.prototype.setTerm = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.casper.DeployInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.casper.DeployInfo.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string sig = 4;
 * @return {string}
 */
proto.casper.DeployInfo.prototype.getSig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.casper.DeployInfo.prototype.setSig = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sigAlgorithm = 5;
 * @return {string}
 */
proto.casper.DeployInfo.prototype.getSigalgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.casper.DeployInfo.prototype.setSigalgorithm = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 phloPrice = 7;
 * @return {number}
 */
proto.casper.DeployInfo.prototype.getPhloprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.casper.DeployInfo.prototype.setPhloprice = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 phloLimit = 8;
 * @return {number}
 */
proto.casper.DeployInfo.prototype.getPhlolimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.casper.DeployInfo.prototype.setPhlolimit = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 validAfterBlockNumber = 9;
 * @return {number}
 */
proto.casper.DeployInfo.prototype.getValidafterblocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.casper.DeployInfo.prototype.setValidafterblocknumber = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 cost = 10;
 * @return {number}
 */
proto.casper.DeployInfo.prototype.getCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.casper.DeployInfo.prototype.setCost = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool errored = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.casper.DeployInfo.prototype.getErrored = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.casper.DeployInfo.prototype.setErrored = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional string systemDeployError = 12;
 * @return {string}
 */
proto.casper.DeployInfo.prototype.getSystemdeployerror = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.casper.DeployInfo.prototype.setSystemdeployerror = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.LightBlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.LightBlockInfo.repeatedFields_, null);
};
goog.inherits(proto.casper.LightBlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.LightBlockInfo.displayName = 'proto.casper.LightBlockInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.LightBlockInfo.repeatedFields_ = [11,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.LightBlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.LightBlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.LightBlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.LightBlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockhash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sender: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seqnum: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sig: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sigalgorithm: jspb.Message.getFieldWithDefault(msg, 5, ""),
    shardid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    extrabytes: msg.getExtrabytes_asB64(),
    version: jspb.Message.getFieldWithDefault(msg, 8, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 9, 0),
    headerextrabytes: msg.getHeaderextrabytes_asB64(),
    parentshashlistList: jspb.Message.getRepeatedField(msg, 11),
    blocknumber: jspb.Message.getFieldWithDefault(msg, 12, 0),
    prestatehash: jspb.Message.getFieldWithDefault(msg, 13, ""),
    poststatehash: jspb.Message.getFieldWithDefault(msg, 14, ""),
    bodyextrabytes: msg.getBodyextrabytes_asB64(),
    bondsList: jspb.Message.toObjectList(msg.getBondsList(),
    proto.casper.BondInfo.toObject, includeInstance),
    blocksize: jspb.Message.getFieldWithDefault(msg, 17, ""),
    deploycount: jspb.Message.getFieldWithDefault(msg, 18, 0),
    faulttolerance: +jspb.Message.getFieldWithDefault(msg, 19, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.LightBlockInfo}
 */
proto.casper.LightBlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.LightBlockInfo;
  return proto.casper.LightBlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.LightBlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.LightBlockInfo}
 */
proto.casper.LightBlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockhash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqnum(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSig(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigalgorithm(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardid(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtrabytes(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeaderextrabytes(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addParentshashlist(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlocknumber(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrestatehash(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoststatehash(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodyextrabytes(value);
      break;
    case 16:
      var value = new proto.casper.BondInfo;
      reader.readMessage(value,proto.casper.BondInfo.deserializeBinaryFromReader);
      msg.addBonds(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlocksize(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeploycount(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFaulttolerance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.LightBlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.LightBlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.LightBlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.LightBlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockhash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeqnum();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSig();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSigalgorithm();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getShardid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getExtrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getHeaderextrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getParentshashlistList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getPrestatehash();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getPoststatehash();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getBodyextrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.getBondsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.casper.BondInfo.serializeBinaryToWriter
    );
  }
  f = message.getBlocksize();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getDeploycount();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getFaulttolerance();
  if (f !== 0.0) {
    writer.writeFloat(
      19,
      f
    );
  }
};


/**
 * optional string blockHash = 1;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getBlockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.casper.LightBlockInfo.prototype.setBlockhash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sender = 2;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.casper.LightBlockInfo.prototype.setSender = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 seqNum = 3;
 * @return {number}
 */
proto.casper.LightBlockInfo.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.casper.LightBlockInfo.prototype.setSeqnum = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string sig = 4;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getSig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.casper.LightBlockInfo.prototype.setSig = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sigAlgorithm = 5;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getSigalgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.casper.LightBlockInfo.prototype.setSigalgorithm = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string shardId = 6;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getShardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.casper.LightBlockInfo.prototype.setShardid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes extraBytes = 7;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getExtrabytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes extraBytes = 7;
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getExtrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtrabytes()));
};


/**
 * optional bytes extraBytes = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {!Uint8Array}
 */
proto.casper.LightBlockInfo.prototype.getExtrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtrabytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.LightBlockInfo.prototype.setExtrabytes = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional int64 version = 8;
 * @return {number}
 */
proto.casper.LightBlockInfo.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.casper.LightBlockInfo.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 timestamp = 9;
 * @return {number}
 */
proto.casper.LightBlockInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.casper.LightBlockInfo.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bytes headerExtraBytes = 10;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getHeaderextrabytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes headerExtraBytes = 10;
 * This is a type-conversion wrapper around `getHeaderextrabytes()`
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getHeaderextrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeaderextrabytes()));
};


/**
 * optional bytes headerExtraBytes = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeaderextrabytes()`
 * @return {!Uint8Array}
 */
proto.casper.LightBlockInfo.prototype.getHeaderextrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeaderextrabytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.LightBlockInfo.prototype.setHeaderextrabytes = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * repeated string parentsHashList = 11;
 * @return {!Array<string>}
 */
proto.casper.LightBlockInfo.prototype.getParentshashlistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/** @param {!Array<string>} value */
proto.casper.LightBlockInfo.prototype.setParentshashlistList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.casper.LightBlockInfo.prototype.addParentshashlist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.casper.LightBlockInfo.prototype.clearParentshashlistList = function() {
  this.setParentshashlistList([]);
};


/**
 * optional int64 blockNumber = 12;
 * @return {number}
 */
proto.casper.LightBlockInfo.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.casper.LightBlockInfo.prototype.setBlocknumber = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string preStateHash = 13;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getPrestatehash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.casper.LightBlockInfo.prototype.setPrestatehash = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string postStateHash = 14;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getPoststatehash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.casper.LightBlockInfo.prototype.setPoststatehash = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bytes bodyExtraBytes = 15;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getBodyextrabytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes bodyExtraBytes = 15;
 * This is a type-conversion wrapper around `getBodyextrabytes()`
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getBodyextrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodyextrabytes()));
};


/**
 * optional bytes bodyExtraBytes = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodyextrabytes()`
 * @return {!Uint8Array}
 */
proto.casper.LightBlockInfo.prototype.getBodyextrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodyextrabytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.LightBlockInfo.prototype.setBodyextrabytes = function(value) {
  jspb.Message.setProto3BytesField(this, 15, value);
};


/**
 * repeated BondInfo bonds = 16;
 * @return {!Array<!proto.casper.BondInfo>}
 */
proto.casper.LightBlockInfo.prototype.getBondsList = function() {
  return /** @type{!Array<!proto.casper.BondInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.casper.BondInfo, 16));
};


/** @param {!Array<!proto.casper.BondInfo>} value */
proto.casper.LightBlockInfo.prototype.setBondsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.casper.BondInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.BondInfo}
 */
proto.casper.LightBlockInfo.prototype.addBonds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.casper.BondInfo, opt_index);
};


proto.casper.LightBlockInfo.prototype.clearBondsList = function() {
  this.setBondsList([]);
};


/**
 * optional string blockSize = 17;
 * @return {string}
 */
proto.casper.LightBlockInfo.prototype.getBlocksize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.casper.LightBlockInfo.prototype.setBlocksize = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional int32 deployCount = 18;
 * @return {number}
 */
proto.casper.LightBlockInfo.prototype.getDeploycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.casper.LightBlockInfo.prototype.setDeploycount = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional float faultTolerance = 19;
 * @return {number}
 */
proto.casper.LightBlockInfo.prototype.getFaulttolerance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 19, 0.0));
};


/** @param {number} value */
proto.casper.LightBlockInfo.prototype.setFaulttolerance = function(value) {
  jspb.Message.setProto3FloatField(this, 19, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.BlockInfo.repeatedFields_, null);
};
goog.inherits(proto.casper.BlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.BlockInfo.displayName = 'proto.casper.BlockInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.BlockInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockinfo: (f = msg.getBlockinfo()) && proto.casper.LightBlockInfo.toObject(includeInstance, f),
    deploysList: jspb.Message.toObjectList(msg.getDeploysList(),
    proto.casper.DeployInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockInfo}
 */
proto.casper.BlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockInfo;
  return proto.casper.BlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockInfo}
 */
proto.casper.BlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.LightBlockInfo;
      reader.readMessage(value,proto.casper.LightBlockInfo.deserializeBinaryFromReader);
      msg.setBlockinfo(value);
      break;
    case 2:
      var value = new proto.casper.DeployInfo;
      reader.readMessage(value,proto.casper.DeployInfo.deserializeBinaryFromReader);
      msg.addDeploys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.LightBlockInfo.serializeBinaryToWriter
    );
  }
  f = message.getDeploysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.DeployInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional LightBlockInfo blockInfo = 1;
 * @return {?proto.casper.LightBlockInfo}
 */
proto.casper.BlockInfo.prototype.getBlockinfo = function() {
  return /** @type{?proto.casper.LightBlockInfo} */ (
    jspb.Message.getWrapperField(this, proto.casper.LightBlockInfo, 1));
};


/** @param {?proto.casper.LightBlockInfo|undefined} value */
proto.casper.BlockInfo.prototype.setBlockinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.casper.BlockInfo.prototype.clearBlockinfo = function() {
  this.setBlockinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.BlockInfo.prototype.hasBlockinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated DeployInfo deploys = 2;
 * @return {!Array<!proto.casper.DeployInfo>}
 */
proto.casper.BlockInfo.prototype.getDeploysList = function() {
  return /** @type{!Array<!proto.casper.DeployInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.casper.DeployInfo, 2));
};


/** @param {!Array<!proto.casper.DeployInfo>} value */
proto.casper.BlockInfo.prototype.setDeploysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.DeployInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.DeployInfo}
 */
proto.casper.BlockInfo.prototype.addDeploys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.DeployInfo, opt_index);
};


proto.casper.BlockInfo.prototype.clearDeploysList = function() {
  this.setDeploysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.DataWithBlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.DataWithBlockInfo.repeatedFields_, null);
};
goog.inherits(proto.casper.DataWithBlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.DataWithBlockInfo.displayName = 'proto.casper.DataWithBlockInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.DataWithBlockInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.DataWithBlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.DataWithBlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.DataWithBlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.DataWithBlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    postblockdataList: jspb.Message.toObjectList(msg.getPostblockdataList(),
    RhoTypes_pb.Par.toObject, includeInstance),
    block: (f = msg.getBlock()) && proto.casper.LightBlockInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.DataWithBlockInfo}
 */
proto.casper.DataWithBlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.DataWithBlockInfo;
  return proto.casper.DataWithBlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.DataWithBlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.DataWithBlockInfo}
 */
proto.casper.DataWithBlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.addPostblockdata(value);
      break;
    case 2:
      var value = new proto.casper.LightBlockInfo;
      reader.readMessage(value,proto.casper.LightBlockInfo.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.DataWithBlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.DataWithBlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.DataWithBlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.DataWithBlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostblockdataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.casper.LightBlockInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Par postBlockData = 1;
 * @return {!Array<!proto.Par>}
 */
proto.casper.DataWithBlockInfo.prototype.getPostblockdataList = function() {
  return /** @type{!Array<!proto.Par>} */ (
    jspb.Message.getRepeatedWrapperField(this, RhoTypes_pb.Par, 1));
};


/** @param {!Array<!proto.Par>} value */
proto.casper.DataWithBlockInfo.prototype.setPostblockdataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Par=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Par}
 */
proto.casper.DataWithBlockInfo.prototype.addPostblockdata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Par, opt_index);
};


proto.casper.DataWithBlockInfo.prototype.clearPostblockdataList = function() {
  this.setPostblockdataList([]);
};


/**
 * optional LightBlockInfo block = 2;
 * @return {?proto.casper.LightBlockInfo}
 */
proto.casper.DataWithBlockInfo.prototype.getBlock = function() {
  return /** @type{?proto.casper.LightBlockInfo} */ (
    jspb.Message.getWrapperField(this, proto.casper.LightBlockInfo, 2));
};


/** @param {?proto.casper.LightBlockInfo|undefined} value */
proto.casper.DataWithBlockInfo.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.casper.DataWithBlockInfo.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.DataWithBlockInfo.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ContinuationsWithBlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.ContinuationsWithBlockInfo.repeatedFields_, null);
};
goog.inherits(proto.casper.ContinuationsWithBlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.ContinuationsWithBlockInfo.displayName = 'proto.casper.ContinuationsWithBlockInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.ContinuationsWithBlockInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ContinuationsWithBlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ContinuationsWithBlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ContinuationsWithBlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ContinuationsWithBlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    postblockcontinuationsList: jspb.Message.toObjectList(msg.getPostblockcontinuationsList(),
    proto.casper.WaitingContinuationInfo.toObject, includeInstance),
    block: (f = msg.getBlock()) && proto.casper.LightBlockInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ContinuationsWithBlockInfo}
 */
proto.casper.ContinuationsWithBlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ContinuationsWithBlockInfo;
  return proto.casper.ContinuationsWithBlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ContinuationsWithBlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ContinuationsWithBlockInfo}
 */
proto.casper.ContinuationsWithBlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.WaitingContinuationInfo;
      reader.readMessage(value,proto.casper.WaitingContinuationInfo.deserializeBinaryFromReader);
      msg.addPostblockcontinuations(value);
      break;
    case 2:
      var value = new proto.casper.LightBlockInfo;
      reader.readMessage(value,proto.casper.LightBlockInfo.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ContinuationsWithBlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ContinuationsWithBlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ContinuationsWithBlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ContinuationsWithBlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostblockcontinuationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.casper.WaitingContinuationInfo.serializeBinaryToWriter
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.casper.LightBlockInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WaitingContinuationInfo postBlockContinuations = 1;
 * @return {!Array<!proto.casper.WaitingContinuationInfo>}
 */
proto.casper.ContinuationsWithBlockInfo.prototype.getPostblockcontinuationsList = function() {
  return /** @type{!Array<!proto.casper.WaitingContinuationInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.casper.WaitingContinuationInfo, 1));
};


/** @param {!Array<!proto.casper.WaitingContinuationInfo>} value */
proto.casper.ContinuationsWithBlockInfo.prototype.setPostblockcontinuationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.casper.WaitingContinuationInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.WaitingContinuationInfo}
 */
proto.casper.ContinuationsWithBlockInfo.prototype.addPostblockcontinuations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.casper.WaitingContinuationInfo, opt_index);
};


proto.casper.ContinuationsWithBlockInfo.prototype.clearPostblockcontinuationsList = function() {
  this.setPostblockcontinuationsList([]);
};


/**
 * optional LightBlockInfo block = 2;
 * @return {?proto.casper.LightBlockInfo}
 */
proto.casper.ContinuationsWithBlockInfo.prototype.getBlock = function() {
  return /** @type{?proto.casper.LightBlockInfo} */ (
    jspb.Message.getWrapperField(this, proto.casper.LightBlockInfo, 2));
};


/** @param {?proto.casper.LightBlockInfo|undefined} value */
proto.casper.ContinuationsWithBlockInfo.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.casper.ContinuationsWithBlockInfo.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ContinuationsWithBlockInfo.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.WaitingContinuationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.WaitingContinuationInfo.repeatedFields_, null);
};
goog.inherits(proto.casper.WaitingContinuationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.WaitingContinuationInfo.displayName = 'proto.casper.WaitingContinuationInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.WaitingContinuationInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.WaitingContinuationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.WaitingContinuationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.WaitingContinuationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.WaitingContinuationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    postblockpatternsList: jspb.Message.toObjectList(msg.getPostblockpatternsList(),
    RhoTypes_pb.BindPattern.toObject, includeInstance),
    postblockcontinuation: (f = msg.getPostblockcontinuation()) && RhoTypes_pb.Par.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.WaitingContinuationInfo}
 */
proto.casper.WaitingContinuationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.WaitingContinuationInfo;
  return proto.casper.WaitingContinuationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.WaitingContinuationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.WaitingContinuationInfo}
 */
proto.casper.WaitingContinuationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new RhoTypes_pb.BindPattern;
      reader.readMessage(value,RhoTypes_pb.BindPattern.deserializeBinaryFromReader);
      msg.addPostblockpatterns(value);
      break;
    case 2:
      var value = new RhoTypes_pb.Par;
      reader.readMessage(value,RhoTypes_pb.Par.deserializeBinaryFromReader);
      msg.setPostblockcontinuation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.WaitingContinuationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.WaitingContinuationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.WaitingContinuationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.WaitingContinuationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostblockpatternsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      RhoTypes_pb.BindPattern.serializeBinaryToWriter
    );
  }
  f = message.getPostblockcontinuation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      RhoTypes_pb.Par.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BindPattern postBlockPatterns = 1;
 * @return {!Array<!proto.BindPattern>}
 */
proto.casper.WaitingContinuationInfo.prototype.getPostblockpatternsList = function() {
  return /** @type{!Array<!proto.BindPattern>} */ (
    jspb.Message.getRepeatedWrapperField(this, RhoTypes_pb.BindPattern, 1));
};


/** @param {!Array<!proto.BindPattern>} value */
proto.casper.WaitingContinuationInfo.prototype.setPostblockpatternsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.BindPattern=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BindPattern}
 */
proto.casper.WaitingContinuationInfo.prototype.addPostblockpatterns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.BindPattern, opt_index);
};


proto.casper.WaitingContinuationInfo.prototype.clearPostblockpatternsList = function() {
  this.setPostblockpatternsList([]);
};


/**
 * optional Par postBlockContinuation = 2;
 * @return {?proto.Par}
 */
proto.casper.WaitingContinuationInfo.prototype.getPostblockcontinuation = function() {
  return /** @type{?proto.Par} */ (
    jspb.Message.getWrapperField(this, RhoTypes_pb.Par, 2));
};


/** @param {?proto.Par|undefined} value */
proto.casper.WaitingContinuationInfo.prototype.setPostblockcontinuation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.casper.WaitingContinuationInfo.prototype.clearPostblockcontinuation = function() {
  this.setPostblockcontinuation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.WaitingContinuationInfo.prototype.hasPostblockcontinuation = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.casper);
